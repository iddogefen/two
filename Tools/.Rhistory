for (e in 1:length(events)){
curr_event_file <-
onsets[[e]] <- as.numeric(unlist(event_file %>% subset(iti_simulation == s & run == r & shuffle_order == t & shuffle_iti == sh & event == events[e]) %>% select(onset)))/1000
durations[[e]] <- as.numeric(unlist(event_file %>% subset(iti_simulation == s & run == r & shuffle_order == t & shuffle_iti == sh & event == events[e]) %>% select(duration)))/1000
totaltime[[e]] <- closest_divider(round((nrow(curr_df) * response_duration + sum(curr_df$iti))/1000),TR)
effectsize[[e]] <- 1
}
design = specifydesign(onsets=onsets, durations=durations, totaltime=totaltime[[1]], TR=TR, effectsize=effectsize, conv="double-gamma", cond.names = events)
# ==============================================================================
# compute correlation between items
# ==============================================================================
m <- cor.test(design[,events[1]], design[,events[2]])
correlation_df <- rbind(correlation_df, data.frame(estimate=as.numeric(m$estimate), run=r, iti_simulation=s, shuffle_order=t, shuffle_itis=sh))
}
} # t
} #
} # r
output <- list(full_df, correlation_df, event_file)
names(output) <- c("full_df", "correlation_df", "event_file")
return(output)
} # function
# load final_decisions matrix
final_decisions = read.csv("../Task_sequences/Final_decisions/final_decisions_1.csv") %>%
subset(practice == 0)
final_decisions_simulation <- simulate_iti_fmri(df = final_decisions,
event_column = "choice_type",
response_duration = 2,
n_iti_sims = 5,
n_shuffle_trials = 5,
n_shuffle_itis = 5,
n_runs = 4,
TR = 1.5,
iti_params = iti_params)
View(final_decisions_simulation)
test <- final_decisions_simulation$correlation_df
View(test)
test2 <- final_decisions_simulation$full_df
View(test2)
test2 %>% group_by(iti_simulation, order_shuffle, iti_shuffle) %>% summarise(mean = mean(iti))
View(test2)
simulate_iti_fmri <- function(df, event_column, response_duration, n_iti_sims, n_shuffle_trials, n_shuffle_itis, n_runs, TR, iti_params){
df_practice <- df %>% subset(practice == 1)
df <- df %>% subset(practice == 0)
event_file = data.frame(matrix(NaN, ncol=8, nrow=0));
full_df <- data.frame(matrix(NaN, ncol=ncol(df), nrow=0));
correlation_df <- data.frame(matrix(NaN, ncol=4, nrow=0));
for (r in 1:n_runs){
curr_df <- df %>% subset(run == r)
# ==============================================================================
# generate itis
# ==============================================================================
# we first generate itis from a truncated exponential distribution
for (s in 1:n_iti_sims){
# sample iti from truncated exponential distribution
curr_iti = round(rtruncgamma(nrow(curr_df), shape=iti_params$shape, rate=iti_params$rate, scale=iti_params$scale, a=iti_params$min, b=iti_params$max),1)*1000
#round(rtruncexp(nrow(curr_df), rate = deliberation_iti$rate, a = deliberation_iti$min, b = deliberation_iti$max),1)*1000
curr_df <- curr_df %>% mutate(iti = curr_iti, iti_simulation = s)
# ==============================================================================
# shuffle the order of trials
# ==============================================================================
for (t in 1:n_shuffle_trials){
curr_df <- curr_df %>% slice(sample(1:n())) %>% mutate(order_shuffle = t)
# ==============================================================================
# shuffle the order of itis
# ==============================================================================
for (sh in 1:n_shuffle_itis){
curr_df <- curr_df %>% mutate(iti = sample(iti),
iti_shuffle = sh)
# ==============================================================================
# create event files
# ==============================================================================
# restart onset
onset = 0;
for (i in 1:nrow(curr_df)){
iti = curr_df$iti[i];
duration = response_duration;
event = curr_df[i,event_column]
event_file = rbind(event_file, data.frame(event=event, onset=onset, duration=duration, iti=iti, run=r, iti_simulation=s, shuffle_order=t, shuffle_iti=sh));
onset = onset + duration + iti;
}
# add practice trials
if (r == 1){
curr_practice <- df_practice %>% mutate(iti_simulation=s, shuffle_order=t, shuffle_iti=sh)
curr_df <- rbind(curr_practice, curr_df)
}
full_df <- rbind(full_df, curr_df)
# ==============================================================================
# create a design matrix
# ==============================================================================
events <- unique(df[,event_column])
onsets <- list(); durations <- list(); totaltime <- list();  effectsize <- list()
# function to find the total run time such that there will be an integer number of TRs.
closest_divider <- function(num, divider){
while(num %% divider != 0){
num = num + 0.5
}
return(num)
}
for (e in 1:length(events)){
curr_event_file <-
onsets[[e]] <- as.numeric(unlist(event_file %>% subset(iti_simulation == s & run == r & shuffle_order == t & shuffle_iti == sh & event == events[e]) %>% select(onset)))/1000
durations[[e]] <- as.numeric(unlist(event_file %>% subset(iti_simulation == s & run == r & shuffle_order == t & shuffle_iti == sh & event == events[e]) %>% select(duration)))/1000
totaltime[[e]] <- closest_divider(round((nrow(curr_df) * response_duration + sum(curr_df$iti))/1000),TR)
effectsize[[e]] <- 1
}
design = specifydesign(onsets=onsets, durations=durations, totaltime=totaltime[[1]], TR=TR, effectsize=effectsize, conv="double-gamma", cond.names = events)
# ==============================================================================
# compute correlation between items
# ==============================================================================
m <- cor.test(design[,events[1]], design[,events[2]])
correlation_df <- rbind(correlation_df, data.frame(estimate=as.numeric(m$estimate), run=r, iti_simulation=s, shuffle_order=t, shuffle_itis=sh))
}
} # t
} #
} # r
output <- list(full_df, correlation_df, event_file)
names(output) <- c("full_df", "correlation_df", "event_file")
return(output)
} # function
final_decisions_simulation <- simulate_iti_fmri(df = read.csv("../Task_sequences/Final_decisions/final_decisions_1.csv") ,
event_column = "choice_type",
response_duration = 2,
n_iti_sims = 2,
n_shuffle_trials = 2,
n_shuffle_itis = 2,
n_runs = 4,
TR = 1.5,
iti_params = iti_params)
df = read.csv("../Task_sequences/Final_decisions/final_decisions_1.csv")
event_column = "choice_type"
response_duration = 2
n_iti_sims = 2
n_shuffle_trials = 2
n_shuffle_itis = 2
n_runs = 4
TR = 1.5
df_practice <- df %>% subset(practice == 1)
df <- df %>% subset(practice == 0)
event_file = data.frame(matrix(NaN, ncol=8, nrow=0));
full_df <- data.frame(matrix(NaN, ncol=ncol(df), nrow=0));
correlation_df <- data.frame(matrix(NaN, ncol=4, nrow=0));
r=1
curr_df <- df %>% subset(run == r)
s=1
# sample iti from truncated exponential distribution
curr_iti = round(rtruncgamma(nrow(curr_df), shape=iti_params$shape, rate=iti_params$rate, scale=iti_params$scale, a=iti_params$min, b=iti_params$max),1)*1000
#round(rtruncexp(nrow(curr_df), rate = deliberation_iti$rate, a = deliberation_iti$min, b = deliberation_iti$max),1)*1000
curr_df <- curr_df %>% mutate(iti = curr_iti, iti_simulation = s)
t=1
sh=1
curr_df <- curr_df %>% mutate(iti = sample(iti),
iti_shuffle = sh)
# restart onset
onset = 0;
for (i in 1:nrow(curr_df)){
iti = curr_df$iti[i];
duration = response_duration;
event = curr_df[i,event_column]
event_file = rbind(event_file, data.frame(event=event, onset=onset, duration=duration, iti=iti, run=r, iti_simulation=s, shuffle_order=t, shuffle_iti=sh));
onset = onset + duration + iti;
}
# add practice trials
if (r == 1){
curr_practice <- df_practice %>% mutate(iti_simulation=s, shuffle_order=t, shuffle_iti=sh)
curr_df <- rbind(curr_practice, curr_df)
}
curr_practice
curr_practice
ncol(curr_practice)
ncol(curr_df)
View(curr_df)
View(curr_df)
curr_df <- curr_df %>% slice(sample(1:n())) %>%
mutate(order_shuffle = t)
curr_df <- curr_df %>% mutate(iti = sample(iti),
iti_shuffle = sh)
# sample iti from truncated exponential distribution
curr_iti = round(rtruncgamma(nrow(curr_df), shape=iti_params$shape, rate=iti_params$rate, scale=iti_params$scale, a=iti_params$min, b=iti_params$max),1)*1000
#round(rtruncexp(nrow(curr_df), rate = deliberation_iti$rate, a = deliberation_iti$min, b = deliberation_iti$max),1)*1000
curr_df <- curr_df %>% mutate(iti = curr_iti, iti_simulation = s)
curr_df <- curr_df %>% slice(sample(1:n())) %>% mutate(order_shuffle = t)
curr_df <- curr_df %>% mutate(iti = sample(iti),
iti_shuffle = sh)
# restart onset
onset = 0;
for (i in 1:nrow(curr_df)){
iti = curr_df$iti[i];
duration = response_duration;
event = curr_df[i,event_column]
event_file = rbind(event_file, data.frame(event=event, onset=onset, duration=duration, iti=iti, run=r, iti_simulation=s, shuffle_order=t, shuffle_iti=sh));
onset = onset + duration + iti;
}
# add practice trials
if (r == 1){
curr_practice <- df_practice %>% mutate(iti_simulation=s, shuffle_order=t, shuffle_iti=sh)
curr_df <- rbind(curr_practice, curr_df)
}
curr_practice <- df_practice %>% mutate(iti_simulation=s, shuffle_order=t, shuffle_iti=sh)
curr_practice
curr_df <- rbind(curr_practice, curr_df)
df_practice <- df %>% subset(practice == 1)
df <- df %>% subset(practice == 0)
event_file = data.frame(matrix(NaN, ncol=8, nrow=0));
full_df <- data.frame(matrix(NaN, ncol=ncol(df), nrow=0));
correlation_df <- data.frame(matrix(NaN, ncol=4, nrow=0));
curr_df <- df %>% subset(run == r)
# sample iti from truncated exponential distribution
curr_iti = round(rtruncgamma(nrow(curr_df), shape=iti_params$shape, rate=iti_params$rate, scale=iti_params$scale, a=iti_params$min, b=iti_params$max),1)*1000
#round(rtruncexp(nrow(curr_df), rate = deliberation_iti$rate, a = deliberation_iti$min, b = deliberation_iti$max),1)*1000
curr_df <- curr_df %>% mutate(iti = curr_iti, iti_simulation = s)
curr_df <- curr_df %>% slice(sample(1:n())) %>% mutate(order_shuffle = t)
curr_df <- curr_df %>% mutate(iti = sample(iti), iti_shuffle = sh)
# restart onset
onset = 0;
for (i in 1:nrow(curr_df)){
iti = curr_df$iti[i];
duration = response_duration;
event = curr_df[i,event_column]
event_file = rbind(event_file, data.frame(event=event, onset=onset, duration=duration, iti=iti, run=r, iti_simulation=s, shuffle_order=t, shuffle_iti=sh));
onset = onset + duration + iti;
}
curr_practice <- df_practice %>% mutate(iti_simulation=s, shuffle_order=t, shuffle_iti=sh)
curr_df <- rbind(curr_practice, curr_df)
full_df <- rbind(full_df, curr_df)
View(full_df)
curr_practice <- df_practice %>% mutate(iti_simulation=s, shuffle_order=t, shuffle_iti=sh)
curr_practice <- df_practice
View(df_practice)
curr_df <- df %>% subset(run == r)
df = read.csv("../Task_sequences/Final_decisions/final_decisions_1.csv")
df_practice <- df %>% subset(practice == 1)
df <- df %>% subset(practice == 0)
curr_df <- df %>% subset(run == r)
# sample iti from truncated exponential distribution
curr_iti = round(rtruncgamma(nrow(curr_df), shape=iti_params$shape, rate=iti_params$rate, scale=iti_params$scale, a=iti_params$min, b=iti_params$max),1)*1000
#round(rtruncexp(nrow(curr_df), rate = deliberation_iti$rate, a = deliberation_iti$min, b = deliberation_iti$max),1)*1000
curr_df <- curr_df %>% mutate(iti = curr_iti, iti_simulation = s)
curr_df <- curr_df %>% slice(sample(1:n())) %>% mutate(order_shuffle = t)
curr_df <- curr_df %>% mutate(iti = sample(iti), iti_shuffle = sh)
# restart onset
onset = 0;
for (i in 1:nrow(curr_df)){
iti = curr_df$iti[i];
duration = response_duration;
event = curr_df[i,event_column]
event_file = rbind(event_file, data.frame(event=event, onset=onset, duration=duration, iti=iti, run=r, iti_simulation=s, shuffle_order=t, shuffle_iti=sh));
onset = onset + duration + iti;
}
curr_practice <- df_practice %>% mutate(iti_simulation=s, shuffle_order=t, shuffle_iti=sh)
curr_df <- rbind(curr_practice, curr_df)
colnames(curr_practice)
colnames(curr_df)
simulate_iti_fmri <- function(df, event_column, response_duration, n_iti_sims, n_shuffle_trials, n_shuffle_itis, n_runs, TR, iti_params){
df_practice <- df %>% subset(practice == 1)
df <- df %>% subset(practice == 0)
event_file = data.frame(matrix(NaN, ncol=8, nrow=0));
full_df <- data.frame(matrix(NaN, ncol=ncol(df), nrow=0));
correlation_df <- data.frame(matrix(NaN, ncol=4, nrow=0));
for (r in 1:n_runs){
curr_df <- df %>% subset(run == r)
# ==============================================================================
# generate itis
# ==============================================================================
# we first generate itis from a truncated exponential distribution
for (s in 1:n_iti_sims){
# sample iti from truncated exponential distribution
curr_iti = round(rtruncgamma(nrow(curr_df), shape=iti_params$shape, rate=iti_params$rate, scale=iti_params$scale, a=iti_params$min, b=iti_params$max),1)*1000
#round(rtruncexp(nrow(curr_df), rate = deliberation_iti$rate, a = deliberation_iti$min, b = deliberation_iti$max),1)*1000
curr_df <- curr_df %>% mutate(iti = curr_iti, iti_simulation = s)
# ==============================================================================
# shuffle the order of trials
# ==============================================================================
for (t in 1:n_shuffle_trials){
curr_df <- curr_df %>% slice(sample(1:n())) %>% mutate(order_shuffle = t)
# ==============================================================================
# shuffle the order of itis
# ==============================================================================
for (sh in 1:n_shuffle_itis){
curr_df <- curr_df %>% mutate(iti = sample(iti), iti_shuffle = sh)
# ==============================================================================
# create event files
# ==============================================================================
# restart onset
onset = 0;
for (i in 1:nrow(curr_df)){
iti = curr_df$iti[i];
duration = response_duration;
event = curr_df[i,event_column]
event_file = rbind(event_file, data.frame(event=event, onset=onset, duration=duration, iti=iti, run=r, iti_simulation=s, order_shuffle=t, iti_shuffle=sh));
onset = onset + duration + iti;
}
# add practice trials
if (r == 1){
curr_practice <- df_practice %>% mutate(iti_simulation=s, order_shuffle=t, iti_shuffle=sh)
curr_df <- rbind(curr_practice, curr_df)
}
full_df <- rbind(full_df, curr_df)
# ==============================================================================
# create a design matrix
# ==============================================================================
events <- unique(df[,event_column])
onsets <- list(); durations <- list(); totaltime <- list();  effectsize <- list()
# function to find the total run time such that there will be an integer number of TRs.
closest_divider <- function(num, divider){
while(num %% divider != 0){
num = num + 0.5
}
return(num)
}
for (e in 1:length(events)){
curr_event_file <-
onsets[[e]] <- as.numeric(unlist(event_file %>% subset(iti_simulation == s & run == r & order_shuffle == t & iti_shuffle == sh & event == events[e]) %>% select(onset)))/1000
durations[[e]] <- as.numeric(unlist(event_file %>% subset(iti_simulation == s & run == r & order_shuffle == t & iti_shuffle == sh & event == events[e]) %>% select(duration)))/1000
totaltime[[e]] <- closest_divider(round((nrow(curr_df) * response_duration + sum(curr_df$iti))/1000),TR)
effectsize[[e]] <- 1
}
design = specifydesign(onsets=onsets, durations=durations, totaltime=totaltime[[1]], TR=TR, effectsize=effectsize, conv="double-gamma", cond.names = events)
# ==============================================================================
# compute correlation between items
# ==============================================================================
m <- cor.test(design[,events[1]], design[,events[2]])
correlation_df <- rbind(correlation_df, data.frame(estimate=as.numeric(m$estimate), run=r, iti_simulation=s, order_shuffle=t, iti_shuffle=sh))
}
} # t
} #
} # r
output <- list(full_df, correlation_df, event_file)
names(output) <- c("full_df", "correlation_df", "event_file")
return(output)
} # function
final_decisions_simulation <- simulate_iti_fmri(df = read.csv("../Task_sequences/Final_decisions/final_decisions_1.csv") ,
event_column = "choice_type",
response_duration = 2,
n_iti_sims = 2,
n_shuffle_trials = 2,
n_shuffle_itis = 2,
n_runs = 4,
TR = 1.5,
iti_params = iti_params)
test <- final_decisions_simulation$full_df
View(test)
simulate_iti_fmri <- function(df, event_column, response_duration, n_iti_sims, n_shuffle_trials, n_shuffle_itis, n_runs, TR, iti_params){
df <- df %>% subset(practice == 0)
event_file = data.frame(matrix(NaN, ncol=8, nrow=0));
full_df <- data.frame(matrix(NaN, ncol=ncol(df), nrow=0));
correlation_df <- data.frame(matrix(NaN, ncol=4, nrow=0));
for (r in 1:n_runs){
curr_df <- df %>% subset(run == r)
# ==============================================================================
# generate itis
# ==============================================================================
# we first generate itis from a truncated exponential distribution
for (s in 1:n_iti_sims){
# sample iti from truncated exponential distribution
curr_iti = round(rtruncgamma(nrow(curr_df), shape=iti_params$shape, rate=iti_params$rate, scale=iti_params$scale, a=iti_params$min, b=iti_params$max),1)*1000
#round(rtruncexp(nrow(curr_df), rate = deliberation_iti$rate, a = deliberation_iti$min, b = deliberation_iti$max),1)*1000
curr_df <- curr_df %>% mutate(iti = curr_iti, iti_simulation = s)
# ==============================================================================
# shuffle the order of trials
# ==============================================================================
for (t in 1:n_shuffle_trials){
curr_df <- curr_df %>% slice(sample(1:n())) %>% mutate(order_shuffle = t)
# ==============================================================================
# shuffle the order of itis
# ==============================================================================
for (sh in 1:n_shuffle_itis){
curr_df <- curr_df %>% mutate(iti = sample(iti), iti_shuffle = sh)
# ==============================================================================
# create event files
# ==============================================================================
# restart onset
onset = 0;
for (i in 1:nrow(curr_df)){
iti = curr_df$iti[i];
duration = response_duration;
event = curr_df[i,event_column]
event_file = rbind(event_file, data.frame(event=event, onset=onset, duration=duration, iti=iti, run=r, iti_simulation=s, order_shuffle=t, iti_shuffle=sh));
onset = onset + duration + iti;
}
full_df <- rbind(full_df, curr_df)
# ==============================================================================
# create a design matrix
# ==============================================================================
events <- unique(df[,event_column])
onsets <- list(); durations <- list(); totaltime <- list();  effectsize <- list()
# function to find the total run time such that there will be an integer number of TRs.
closest_divider <- function(num, divider){
while(num %% divider != 0){
num = num + 0.5
}
return(num)
}
for (e in 1:length(events)){
curr_event_file <-
onsets[[e]] <- as.numeric(unlist(event_file %>% subset(iti_simulation == s & run == r & order_shuffle == t & iti_shuffle == sh & event == events[e]) %>% select(onset)))/1000
durations[[e]] <- as.numeric(unlist(event_file %>% subset(iti_simulation == s & run == r & order_shuffle == t & iti_shuffle == sh & event == events[e]) %>% select(duration)))/1000
totaltime[[e]] <- closest_divider(round((nrow(curr_df) * response_duration + sum(curr_df$iti))/1000),TR)
effectsize[[e]] <- 1
}
design = specifydesign(onsets=onsets, durations=durations, totaltime=totaltime[[1]], TR=TR, effectsize=effectsize, conv="double-gamma", cond.names = events)
# ==============================================================================
# compute correlation between items
# ==============================================================================
m <- cor.test(design[,events[1]], design[,events[2]])
correlation_df <- rbind(correlation_df, data.frame(estimate=as.numeric(m$estimate), run=r, iti_simulation=s, order_shuffle=t, iti_shuffle=sh))
}
} # t
} #
} # r
output <- list(full_df, correlation_df, event_file)
names(output) <- c("full_df", "correlation_df", "event_file")
return(output)
} # function
final_decisions_simulation <- simulate_iti_fmri(df = read.csv("../Task_sequences/Final_decisions/final_decisions_1.csv") ,
event_column = "choice_type",
response_duration = 2,
n_iti_sims = 2,
n_shuffle_trials = 2,
n_shuffle_itis = 2,
n_runs = 4,
TR = 1.5,
iti_params = iti_params)
test <- final_decisions_simulation$full_df
View(test)
df = read.csv("../Task_sequences/Deliberation/deliberation_1.csv")
View(df)
df = read.csv("../Task_sequences/Memory/memory_1.csv")
View(df)
df = read.csv("../Task_sequences/Outcome_estimation/outcome_estimation_1.csv")
View(df)
save(list = "final_decisions_simulation",file = "../Task_sequences/Simulation/final_decisions_simulation.RData")
simulate_iti_fmri <- function(df, event_column, response_duration, n_iti_sims, n_shuffle_trials, n_shuffle_itis, n_runs, TR, iti_params){
df <- df %>% subset(practice == 0)
event_file = data.frame(matrix(NaN, ncol=8, nrow=0));
full_df <- data.frame(matrix(NaN, ncol=ncol(df), nrow=0));
correlation_df <- data.frame(matrix(NaN, ncol=4, nrow=0));
for (r in 1:n_runs){
curr_df <- df %>% subset(run == r)
# ==============================================================================
# generate itis
# ==============================================================================
# we first generate itis from a truncated exponential distribution
for (s in 1:n_iti_sims){
# sample iti from truncated exponential distribution
curr_iti = round(rtruncgamma(nrow(curr_df), shape=iti_params$shape, rate=iti_params$rate, scale=iti_params$scale, a=iti_params$min, b=iti_params$max),1)*1000
#round(rtruncexp(nrow(curr_df), rate = deliberation_iti$rate, a = deliberation_iti$min, b = deliberation_iti$max),1)*1000
curr_df <- curr_df %>% mutate(iti = curr_iti, iti_simulation = s)
# ==============================================================================
# shuffle the order of trials
# ==============================================================================
for (t in 1:n_shuffle_trials){
curr_df <- curr_df %>% slice(sample(1:n())) %>% mutate(order_shuffle = t)
# ==============================================================================
# shuffle the order of itis
# ==============================================================================
for (sh in 1:n_shuffle_itis){
curr_df <- curr_df %>% mutate(iti = sample(iti), iti_shuffle = sh)
# ==============================================================================
# create event files
# ==============================================================================
# restart onset
onset = 0;
for (i in 1:nrow(curr_df)){
iti = curr_df$iti[i];
duration = response_duration;
event = curr_df[i,event_column]
event_file = rbind(event_file, data.frame(event=event, onset=onset, duration=duration, iti=iti, run=r, iti_simulation=s, order_shuffle=t, iti_shuffle=sh));
onset = onset + duration + iti;
}
full_df <- rbind(full_df, curr_df)
# ==============================================================================
# create a design matrix
# ==============================================================================
events <- unique(df[,event_column])
onsets <- list(); durations <- list(); totaltime <- list();  effectsize <- list()
# function to find the total run time such that there will be an integer number of TRs.
closest_divider <- function(num, divider){
while(num %% divider != 0){
num = num + 0.5
}
return(num)
}
for (e in 1:length(events)){
curr_event_file <-
onsets[[e]] <- as.numeric(unlist(event_file %>% subset(iti_simulation == s & run == r & order_shuffle == t & iti_shuffle == sh & event == events[e]) %>% select(onset)))/1000
durations[[e]] <- as.numeric(unlist(event_file %>% subset(iti_simulation == s & run == r & order_shuffle == t & iti_shuffle == sh & event == events[e]) %>% select(duration)))/1000
totaltime[[e]] <- closest_divider(round((nrow(curr_df) * response_duration + sum(curr_df$iti))/1000),TR)
effectsize[[e]] <- 1
}
design = specifydesign(onsets=onsets, durations=durations, totaltime=totaltime[[1]], TR=TR, effectsize=effectsize, conv="double-gamma", cond.names = events)
# ==============================================================================
# compute correlation between items
# ==============================================================================
m <- cor.test(design[,events[1]], design[,events[2]])
correlation_df <- rbind(correlation_df, data.frame(estimate=as.numeric(m$estimate), run=r, iti_simulation=s, order_shuffle=t, iti_shuffle=sh))
}
} # t
} #
} # r
output <- list(full_df, correlation_df, event_file)
names(output) <- c("full_df", "correlation_df", "event_file")
return(output)
} # function
final_decisions_simulation <- simulate_iti_fmri(df = read.csv("../Task_sequences/Final_decisions/final_decisions_1.csv") ,
event_column = "choice_type",
response_duration = 1.5,
n_iti_sims = 50,
n_shuffle_trials = 50,
n_shuffle_itis = 50,
n_runs = 4,
TR = 1.5,
iti_params = iti_params)
